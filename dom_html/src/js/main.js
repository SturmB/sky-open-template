/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dom_html/src/js/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dom_html/src/js/lib/CEPTalker.ts":
/*!******************************************!*\
  !*** ./dom_html/src/js/lib/CEPTalker.ts ***!
  \******************************************/
/*! exports provided: Talker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Talker", function() { return Talker; });
var Talker = /** @class */ (function () {
    function Talker() {
    }
    Talker.prototype.sayHello = function () {
        return "CEPTalker external!";
    };
    return Talker;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ0VQVGFsa2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQ0VQVGFsa2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQUE7SUFJQSxDQUFDO0lBSFEseUJBQVEsR0FBZjtRQUNFLE9BQU8scUJBQXFCLENBQUM7SUFDL0IsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBSkQsSUFJQyJ9

/***/ }),

/***/ "./dom_html/src/js/lib/CookieManager.ts":
/*!**********************************************!*\
  !*** ./dom_html/src/js/lib/CookieManager.ts ***!
  \**********************************************/
/*! exports provided: CookieManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CookieManager", function() { return CookieManager; });
var CookieManager = /** @class */ (function () {
    function CookieManager(templateDir) {
        if (templateDir === void 0) { templateDir = ""; }
        this.cookieName = "skyOpenTemplate";
        this.cookieValue = templateDir;
        var expires = new Date();
        expires.setFullYear(expires.getFullYear() + 2);
        this.expiryDate = expires.toUTCString();
    }
    CookieManager.prototype.set = function (value) {
        if (value) {
            this.cookieValue = value;
        }
        if (!this.cookieValue) {
            alert("Valid directory not chosen.");
            return;
        }
        document.cookie = this.cookieName + "=" + this.cookieValue + ";expires=" + this.expiryDate + ";";
    };
    CookieManager.prototype.get = function () {
        if (document.cookie) {
            var splitCookie = document.cookie.split(";");
            if (splitCookie.length) {
                for (var _i = 0, splitCookie_1 = splitCookie; _i < splitCookie_1.length; _i++) {
                    var cookie = splitCookie_1[_i];
                    var key = cookie.split("=")[0].trim();
                    var value = cookie.split("=")[1].trim();
                    if (key === this.cookieName) {
                        return value;
                    }
                }
            }
        }
        return null;
    };
    return CookieManager;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29va2llTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvb2tpZU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFLRSx1QkFBWSxXQUF3QjtRQUF4Qiw0QkFBQSxFQUFBLGdCQUF3QjtRQUo1QixlQUFVLEdBQVcsaUJBQWlCLENBQUM7UUFLN0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBTSxPQUFPLEdBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNqQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRU0sMkJBQUcsR0FBVixVQUFXLEtBQWM7UUFDdkIsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUMxQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1lBQ3JDLE9BQU87U0FDUjtRQUNELFFBQVEsQ0FBQyxNQUFNLEdBQU0sSUFBSSxDQUFDLFVBQVUsU0FBSSxJQUFJLENBQUMsV0FBVyxpQkFBWSxJQUFJLENBQUMsVUFBVSxNQUFHLENBQUM7SUFDekYsQ0FBQztJQUVNLDJCQUFHLEdBQVY7UUFDRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBTSxXQUFXLEdBQWEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekQsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFO2dCQUN0QixLQUFxQixVQUFXLEVBQVgsMkJBQVcsRUFBWCx5QkFBVyxFQUFYLElBQVcsRUFBRTtvQkFBN0IsSUFBTSxNQUFNLG9CQUFBO29CQUNmLElBQU0sR0FBRyxHQUFXLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2hELElBQU0sS0FBSyxHQUFXLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2xELElBQUksR0FBRyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7d0JBQzNCLE9BQU8sS0FBSyxDQUFDO3FCQUNkO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXRDRCxJQXNDQyJ9

/***/ }),

/***/ "./dom_html/src/js/lib/Template.ts":
/*!*****************************************!*\
  !*** ./dom_html/src/js/lib/Template.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var OpenTemplate;
(function (OpenTemplate) {
    var TemplateFile = /** @class */ (function () {
        function TemplateFile() {
            this.fullPath = "";
            this.fileName = "";
        }
        TemplateFile.prototype.toString = function () {
            return "fileName: " + this.fileName + "\n      fullPath: " + this.fullPath;
        };
        return TemplateFile;
    }());
    OpenTemplate.TemplateFile = TemplateFile;
})(OpenTemplate || (OpenTemplate = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBVSxZQUFZLENBVXJCO0FBVkQsV0FBVSxZQUFZO0lBQ3BCO1FBQUE7WUFDUyxhQUFRLEdBQVcsRUFBRSxDQUFDO1lBQ3RCLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFNL0IsQ0FBQztRQUpRLCtCQUFRLEdBQWY7WUFDRSxPQUFPLGVBQWEsSUFBSSxDQUFDLFFBQVEsMEJBQ3JCLElBQUksQ0FBQyxRQUFVLENBQUM7UUFDOUIsQ0FBQztRQUNILG1CQUFDO0lBQUQsQ0FBQyxBQVJELElBUUM7SUFSWSx5QkFBWSxlQVF4QixDQUFBO0FBQ0gsQ0FBQyxFQVZTLFlBQVksS0FBWixZQUFZLFFBVXJCIn0=

/***/ }),

/***/ "./dom_html/src/js/main.ts":
/*!*********************************!*\
  !*** ./dom_html/src/js/main.ts ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
!(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
/* harmony import */ var _lib_CEPTalker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/CEPTalker */ "./dom_html/src/js/lib/CEPTalker.ts");
/* harmony import */ var _lib_CookieManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/CookieManager */ "./dom_html/src/js/lib/CookieManager.ts");
/* harmony import */ var _lib_Template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/Template */ "./dom_html/src/js/lib/Template.ts");
/* harmony import */ var _lib_Template__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lib_Template__WEBPACK_IMPORTED_MODULE_3__);
/*global $, window, location, CSInterface, SystemPath, themeManager*/




(function () {
    "use strict";
    var resultFs = !(function webpackMissingModule() { var e = new Error("Cannot find module 'fs'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())("./");
    console.log("Current dir exists: " + resultFs);
    var csInterface = new CSInterface();
    var cookieManager = new _lib_CookieManager__WEBPACK_IMPORTED_MODULE_2__["CookieManager"]();
    function init() {
        /**
         * Event handler for the Open button.
         */
        var openButton = $("#open-button");
        if (openButton) {
            openButton.on("click", function () {
                var t = new _lib_CEPTalker__WEBPACK_IMPORTED_MODULE_1__["Talker"]();
                console.log(t.sayHello());
                csInterface.evalScript("sayHi();", function (res) {
                    console.log(res);
                });
            });
        }
        var setTemplateList = function (json) {
            if (json) {
                var fileList = JSON.parse(json);
                templateList.empty();
                for (var _i = 0, fileList_1 = fileList; _i < fileList_1.length; _i++) {
                    var file = fileList_1[_i];
                    templateList.append($("<option />")
                        .val(file.fullPath)
                        .text(file.fileName));
                }
            }
        };
        var getFiles = function (path) {
            csInterface.evalScript("getFiles(\"" + path + "\");", function (json) {
                setTemplateList(json);
            });
        };
        /**
         * Event handler for the template folder selection button.
         */
        var templateButton = $("#file-control");
        var templateList = $("#template-list");
        if (templateButton) {
            templateButton.on("change", function () {
                // @ts-ignore
                var files = templateButton[0].files;
                if (files.length) {
                    // @ts-ignore
                    var filePath = files[0].path;
                    var path = filePath.substr(0, filePath.lastIndexOf("/"));
                    cookieManager.set(path);
                    getFiles(path);
                }
            });
        }
        themeManager.init();
        var templatePath = cookieManager.get();
        if (templatePath) {
            getFiles(templatePath);
        }
    }
    init();
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUVBQXFFO0FBRXJFLE9BQU8sS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sS0FBSyxNQUFNLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sZ0JBQWdCLENBQUM7QUFFeEIsQ0FBQztJQUNDLFlBQVksQ0FBQztJQUNiLElBQU0sUUFBUSxHQUFZLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBdUIsUUFBVSxDQUFDLENBQUM7SUFFL0MsSUFBTSxXQUFXLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFDbkQsSUFBTSxhQUFhLEdBQWtCLElBQUksYUFBYSxFQUFFLENBQUM7SUFFekQsU0FBUyxJQUFJO1FBQ1g7O1dBRUc7UUFDSCxJQUFNLFVBQVUsR0FBd0IsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFELElBQUksVUFBVSxFQUFFO1lBQ2QsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUU7Z0JBQ3JCLElBQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQixXQUFXLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFDLEdBQVE7b0JBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQU0sZUFBZSxHQUFHLFVBQUMsSUFBd0I7WUFDL0MsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBTSxRQUFRLEdBQWdDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQy9ELFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDckIsS0FBbUIsVUFBUSxFQUFSLHFCQUFRLEVBQVIsc0JBQVEsRUFBUixJQUFRLEVBQUU7b0JBQXhCLElBQU0sSUFBSSxpQkFBQTtvQkFDYixZQUFZLENBQUMsTUFBTSxDQUNqQixDQUFDLENBQUMsWUFBWSxDQUFDO3lCQUNaLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO3lCQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUN2QixDQUFDO2lCQUNIO2FBQ0Y7UUFDSCxDQUFDLENBQUM7UUFFRixJQUFNLFFBQVEsR0FBRyxVQUFDLElBQVk7WUFDNUIsV0FBVyxDQUFDLFVBQVUsQ0FDcEIsZ0JBQWEsSUFBSSxTQUFLLEVBQ3RCLFVBQUMsSUFBd0I7Z0JBQ3ZCLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQztRQUVGOztXQUVHO1FBQ0gsSUFBTSxjQUFjLEdBQXdCLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvRCxJQUFNLFlBQVksR0FBd0IsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDOUQsSUFBSSxjQUFjLEVBQUU7WUFDbEIsY0FBYyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Z0JBQzFCLGFBQWE7Z0JBQ2IsSUFBTSxLQUFLLEdBQWEsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDaEQsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQixhQUFhO29CQUNiLElBQU0sUUFBUSxHQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3ZDLElBQU0sSUFBSSxHQUFXLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDbkUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDeEIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNoQjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFcEIsSUFBTSxZQUFZLEdBQWtCLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4RCxJQUFJLFlBQVksRUFBRTtZQUNoQixRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDVCxDQUFDLENBQUMsRUFBRSxDQUFDIn0=

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,