!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=11)}([function(t,e){t.exports=require("path")},function(t,e){t.exports=require("fs")},function(t,e,n){"use strict";var r=function(){function t(){this.THEME_COLOR_CHANGED_EVENT="com.adobe.csxs.events.ThemeColorChanged",this.hostEnvironment=JSON.parse(window.__adobe_cep__.getHostEnvironment())}return t.prototype.getHostEnvironment=function(){return this.hostEnvironment=JSON.parse(window.__adobe_cep__.getHostEnvironment()),this.hostEnvironment},t.prototype.closeExtension=function(){window.__adobe_cep__.closeExtension()},t.prototype.getSystemPath=function(t){var e=decodeURI(window.__adobe_cep__.getSystemPath(t)),n=this.getOSInformation();return n.indexOf("Windows")>=0?e=e.replace("file:///",""):n.indexOf("Mac")>=0&&(e=e.replace("file://","")),e},t.prototype.evalScript=function(t,e){null==e&&(e=function(t){}),window.__adobe_cep__.evalScript(t,e)},t.prototype.getApplicationID=function(){return this.hostEnvironment.appId},t.prototype.getHostCapabilities=function(){return JSON.parse(window.__adobe_cep__.getHostCapabilities())},t.prototype.dispatchEvent=function(t){"object"==typeof t.data&&(t.data=JSON.stringify(t.data)),window.__adobe_cep__.dispatchEvent(t)},t.prototype.addEventListener=function(t,e,n){window.__adobe_cep__.addEventListener(t,e,n)},t.prototype.removeEventListener=function(t,e,n){window.__adobe_cep__.removeEventListener(t,e,n)},t.prototype.requestOpenExtension=function(t,e){window.__adobe_cep__.requestOpenExtension(t,e)},t.prototype.getExtensions=function(t){var e=JSON.stringify(t),n=window.__adobe_cep__.getExtensions(e);return JSON.parse(n)},t.prototype.getNetworkPreferences=function(){var t=window.__adobe_cep__.getNetworkPreferences();return JSON.parse(t)},t.prototype.initResourceBundle=function(){for(var t=JSON.parse(window.__adobe_cep__.initResourceBundle()),e=document.querySelectorAll("[data-locale]"),n=0;n<e.length;n++){var r=e[n],i=r.getAttribute("data-locale");if(i)for(var o in t)if(0===o.indexOf(i)){var s=t[o];if(o.length==i.length)r.innerHTML=s;else if("."==o.charAt(i.length)){r[o.substring(i.length+1)]=s}}}return t},t.prototype.dumpInstallationInfo=function(){return window.__adobe_cep__.dumpInstallationInfo()},t.prototype.getOSInformation=function(){var t=navigator.userAgent;if("Win32"==navigator.platform||"Windows"==navigator.platform){var e="Windows",n="";return t.indexOf("Windows")>-1&&(t.indexOf("Windows NT 5.0")>-1?e="Windows 2000":t.indexOf("Windows NT 5.1")>-1?e="Windows XP":t.indexOf("Windows NT 5.2")>-1?e="Windows Server 2003":t.indexOf("Windows NT 6.0")>-1?e="Windows Vista":t.indexOf("Windows NT 6.1")>-1?e="Windows 7":t.indexOf("Windows NT 6.2")>-1?e="Windows 8":t.indexOf("Windows NT 6.3")>-1?e="Windows 8.1":t.indexOf("Windows NT 10")>-1&&(e="Windows 10"),n=t.indexOf("WOW64")>-1||t.indexOf("Win64")>-1?" 64-bit":" 32-bit"),e+n}if("MacIntel"==navigator.platform||"Macintosh"==navigator.platform){var r="Mac OS X";return t.indexOf("Mac OS X")>-1&&(r=(r=t.substring(t.indexOf("Mac OS X"),t.indexOf(")"))).replace(/_/g,".")),r}return"Unknown Operation System"},t.prototype.openURLInDefaultBrowser=function(t){return cep.util.openURLInDefaultBrowser(t)},t.prototype.getExtensionID=function(){return window.__adobe_cep__.getExtensionId()},t.prototype.getScaleFactor=function(){return window.__adobe_cep__.getScaleFactor()},t.prototype.setScaleFactorChangedHandler=function(t){window.__adobe_cep__.setScaleFactorChangedHandler(t)},t.prototype.getCurrentApiVersion=function(){return JSON.parse(window.__adobe_cep__.getCurrentApiVersion())},t.prototype.setPanelFlyoutMenu=function(t){"string"==typeof t&&window.__adobe_cep__.invokeSync("setPanelFlyoutMenu",t)},t.prototype.updatePanelMenuItem=function(t,e,n){var r=!1;if(this.getHostCapabilities().EXTENDED_PANEL_MENU){var i=new v(t,e,n);r=window.__adobe_cep__.invokeSync("updatePanelMenuItem",JSON.stringify(i))}return r},t.prototype.setContextMenu=function(t,e){"string"==typeof t&&window.__adobe_cep__.invokeAsync("setContextMenu",t,e)},t.prototype.setContextMenuByJSON=function(t,e){"string"==typeof t&&window.__adobe_cep__.invokeAsync("setContextMenuByJSON",t,e)},t.prototype.updateContextMenuItem=function(t,e,n){var r=new m(t,e,n);ret=window.__adobe_cep__.invokeSync("updateContextMenuItem",JSON.stringify(r))},t.prototype.isWindowVisible=function(){return window.__adobe_cep__.invokeSync("isWindowVisible","")},t.prototype.resizeContent=function(t,e){window.__adobe_cep__.resizeContent(t,e)},t.prototype.registerInvalidCertificateCallback=function(t){return window.__adobe_cep__.registerInvalidCertificateCallback(t)},t.prototype.registerKeyEventsInterest=function(t){return window.__adobe_cep__.registerKeyEventsInterest(t)},t.prototype.setWindowTitle=function(t){window.__adobe_cep__.invokeSync("setWindowTitle",t)},t.prototype.getWindowTitle=function(){return window.__adobe_cep__.invokeSync("getWindowTitle","")},t}();e.CSInterface=r;var i=function(t,e,n,r){this.type=t,this.scope=e,this.appId=n,this.extensionId=r,this.data=""};e.CSEvent=i;var o=function(){};o.USER_DATA="userData",o.COMMON_FILES="commonFiles",o.MY_DOCUMENTS="myDocuments",o.APPLICATION="application",o.EXTENSION="extension",o.HOST_APPLICATION="hostApplication",e.SystemPath=o;var s=function(){};s.RGB="rgb",s.GRADIENT="gradient",s.NONE="none",e.ColorType=s;var a=function(t,e,n,r){this.red=t,this.green=e,this.blue=n,this.alpha=r};e.RGBColor=a;var u=function(t,e){this.x=t,this.y=e};e.Direction=u;var c=function(t,e){this.offset=t,this.rgbColor=e};e.GradientStop=c;var f=function(t,e,n,r){this.type=t,this.direction=e,this.numStops=n,this.arrGradientStop=r};e.GradientColor=f;var l=function(t,e,n){this.type=t,this.antialiasLevel=e,this.color=n};e.UIColor=l;var p=function(t,e,n,r,i,o,s){this.baseFontFamily=t,this.baseFontSize=e,this.appBarBackgroundColor=n,this.panelBackgroundColor=r,this.appBarBackgroundColorSRGB=i,this.panelBackgroundColorSRGB=o,this.systemHighlightColor=s};e.AppSkinInfo=p;var h=function(t,e,n,r,i,o,s){this.appName=t,this.appVersion=e,this.appLocale=n,this.appUILocale=r,this.appId=i,this.isAppOnline=o,this.appSkinInfo=s};e.HostEnvironment=h;var d=function(t,e,n,r,i){this.EXTENDED_PANEL_MENU=t,this.EXTENDED_PANEL_ICONS=e,this.DELEGATE_APE_ENGINE=n,this.SUPPORT_HTML_EXTENSIONS=r,this.DISABLE_FLASH_EXTENSIONS=i};e.HostCapabilities=d;var g=function(t,e,n){this.major=t,this.minor=e,this.micro=n};e.ApiVersion=g;var v=function(t,e,n){this.menuItemLabel=t,this.enabled=e,this.checked=n};e.MenuItemStatus=v;var m=function(t,e,n){this.menuItemID=t,this.enabled=e,this.checked=n};e.ContextMenuItemStatus=m},function(t,e,n){var r=n(4);Object.assign(e,r),e.readFiles=n(5),e.readFilesStream=n(6)},function(t,e,n){var r=n(1),i=n(0);e.promiseFiles=function(t,n,r){n=n||"file";return new Promise((function(i,o){e.files(t,n,(function(t,e){if(t)return o(t);i(e)}),r)}))},e.files=function t(e,n,o,s){var a=typeof n;"object"==a?(s=s||n,n="file",o=function(){}):"string"!==a&&(o=n,n="file"),s=s||{};var u,c={files:[],dirs:[]},f=function(){c="combine"===n?c.files.concat(c.dirs):!n||s.ignoreType||["all","combine"].indexOf(n)>=0?c:c[n+"s"],s.sync||o(null,c)},l=function(e,i,a){return function(p,h){if(p)return a?o(p):r.lstat(e,l(e,i,!0));var d=s.shortName?i:e;if(h&&h.isDirectory()&&17115!==h.mode)if("file"!==n&&c.dirs.push(d),null==s.recursive||s.recursive){var g=function(t,e){if(t)return o(t);"combine"===n?c.files=c.files.concat(e):"all"===n?(c.files=c.files.concat(e.files),c.dirs=c.dirs.concat(e.dirs)):"file"===n?c.files=c.files.concat(e.files):c.dirs=c.dirs.concat(e.dirs),--u||f()},v=Object.assign({},s);v.ignoreType=!0;var m=t(e,n,g,v);s.sync&&g(null,m)}else--u||f();else"dir"!==n&&c.files.push(d),--u||f()}},p=Buffer.from(e);const h=function(t,n){if(t)return o(t);if(!(u=n.length))return f();for(var a,h=0,d=n.length;h<d;h++){var g=n[h].toString();a=i.join(e,g);var v=Buffer.concat([p,Buffer.from(i.sep),n[h]]);if(s.sync){var m=r.statSync(v);l(a,g)(null,m)}else r.stat(v,l(a,g))}return c},d=function(t,e){if(t)return o(t);if(e&&17115===e.mode)return f();if(s.sync){const t=r.readdirSync(p,{encoding:"buffer"});return h(null,t)}r.readdir(p,{encoding:"buffer"},h)};if(s.sync){return d(null,r.statSync(p))}r.stat(p,d)},e.paths=function(t,n,r){"function"==typeof n&&(r=n,n=!1),e.files(t,"all",(function(t,e){if(t)return r(t);r(null,n?e.files.concat(e.dirs):e)}))},e.subdirs=function(t,n,r,i){i=i||{};const o=function(t,e){return t?n(t):("combine"==r&&(e=e.files.concat(e.dirs)),i.sync?e:void n(null,e))},s=e.files(t,"dir",o,i);if(i&&i.sync)return o(null,s)}},function(t,e,n){var r=n(1),i=n(0);function o(t,e){return Array.isArray(e)?e.indexOf(t)>-1:e.test(t)}t.exports=function t(e,n,s,a){"function"==typeof n&&(a=s,s=n,n={}),"string"==typeof n&&(n={encoding:n}),n=function t(e,n,r){var i=e?r?e:t({},e,!0):{};if(!n)return i;for(var o in n)n.hasOwnProperty(o)&&void 0!==n[o]&&(i[o]=n[o]);return i}({recursive:!0,encoding:"utf8",doneOnErr:!0},n);var u=[],c=function(t){if("function"==typeof a){if(t)return a(t);a(null,u)}};r.readdir(e,(function(a,f){if(a&&!0===n.doneOnErr)return"EACCES"===a.code?c():c(a);var l=0;!0===n.reverse||"string"==typeof n.sort&&/reverse|desc/i.test(n.sort)?f=f.reverse():!1!==n.sort&&(f=f.sort()),function a(){var p=f[l++];if(!p)return c(null);var h=i.join(e,p);r.stat(h,(function(e,i){if(e&&!0===n.doneOnErr)return c(e);if(i&&i.isDirectory())if(n.recursive){if(n.matchDir&&!o(p,n.matchDir))return a();if(n.excludeDir&&o(p,n.excludeDir))return a();t(h,n,s,(function(t,e){if(t&&!0===n.doneOnErr)return c(t);u=u.concat(e),a()}))}else a();else if(i&&i.isFile()){if(n.match&&!o(p,n.match))return a();if(n.exclude&&o(p,n.exclude))return a();if(n.filter&&!n.filter(p))return a();n.shortName?u.push(p):u.push(h),r.readFile(h,n.encoding,(function(t,e){if(t){if("EACCES"===t.code)return a();if(!0===n.doneOnErr)return c(t)}s.length>3?n.shortName?s(null,e,p,a):s(null,e,h,a):s(null,e,a)}))}else a()}))}()}))}},function(t,e,n){var r=n(1),i=n(7),o=n(0);function s(t,e){if(Array.isArray(e)){for(var n=e.length,r=0;r<n;r++)if(i(t,e[r]))return!0;return!1}return e.test(t)}t.exports=function t(e,n,i,a){"function"==typeof n&&(a=i,i=n,n={}),"string"==typeof n&&(n={encoding:n}),n=function t(e,n,r){var i=e?r?e:t({},e,!0):{};if(!n)return i;for(var o in n)n.hasOwnProperty(o)&&void 0!==n[o]&&(i[o]=n[o]);return i}({recursive:!0,encoding:"utf8",doneOnErr:!0},n);var u=[],c=function(t){if("function"==typeof a){if(t)return a(t);a(null,u)}};r.readdir(e,(function(a,f){if(a&&!0===n.doneOnErr)return"EACCES"===a.code?c():c(a);var l=0;!0===n.reverse||"string"==typeof n.sort&&/reverse|desc/i.test(n.sort)?f=f.reverse():!1!==n.sort&&(f=f.sort()),function a(){var p=f[l++];if(!p)return c(null);var h=o.join(e,p);r.stat(h,(function(e,o){if(e&&!0===n.doneOnErr)return c(e);if(o&&o.isDirectory())if(n.recursive){if(n.matchDir&&!s(p,n.matchDir))return a();if(n.excludeDir&&s(p,n.excludeDir))return a();t(h,n,i,(function(t,e){if(t&&!0===n.doneOnErr)return c(t);u=u.concat(e),a()}))}else a();else if(o&&o.isFile()){if(n.match&&!s(p,n.match))return a();if(n.exclude&&s(p,n.exclude))return a();if(n.filter&&!n.filter(p))return a();n.shortName?u.push(p):u.push(h);var f=r.createReadStream(h);null!==n.encoding&&f.setEncoding(n.encoding),f.on("error",(function(t){if(!0===n.doneOnErr)return c(t);a()})),i.length>3?n.shortName?i(null,f,p,a):i(null,f,h,a):i(null,f,a)}else a()}))}()}))}},function(t,e,n){t.exports=f,f.Minimatch=l;var r={sep:"/"};try{r=n(0)}catch(t){}var i=f.GLOBSTAR=l.GLOBSTAR={},o=n(8),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},a="().*{}+?[]^$\\!".split("").reduce((function(t,e){return t[e]=!0,t}),{});var u=/\/+/;function c(t,e){t=t||{},e=e||{};var n={};return Object.keys(e).forEach((function(t){n[t]=e[t]})),Object.keys(t).forEach((function(e){n[e]=t[e]})),n}function f(t,e,n){if("string"!=typeof e)throw new TypeError("glob pattern string required");return n||(n={}),!(!n.nocomment&&"#"===e.charAt(0))&&(""===e.trim()?""===t:new l(e,n).match(t))}function l(t,e){if(!(this instanceof l))return new l(t,e);if("string"!=typeof t)throw new TypeError("glob pattern string required");e||(e={}),t=t.trim(),"/"!==r.sep&&(t=t.split(r.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}function p(t,e){if(e||(e=this instanceof l?this.options:{}),void 0===(t=void 0===t?this.pattern:t))throw new TypeError("undefined pattern");return e.nobrace||!t.match(/\{.*\}/)?[t]:o(t)}f.filter=function(t,e){return e=e||{},function(n,r,i){return f(n,t,e)}},f.defaults=function(t){if(!t||!Object.keys(t).length)return f;var e=f,n=function(n,r,i){return e.minimatch(n,r,c(t,i))};return n.Minimatch=function(n,r){return new e.Minimatch(n,c(t,r))},n},l.defaults=function(t){return t&&Object.keys(t).length?f.defaults(t).Minimatch:l},l.prototype.debug=function(){},l.prototype.make=function(){if(this._made)return;var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var n=this.globSet=this.braceExpand();e.debug&&(this.debug=console.error);this.debug(this.pattern,n),n=this.globParts=n.map((function(t){return t.split(u)})),this.debug(this.pattern,n),n=n.map((function(t,e,n){return t.map(this.parse,this)}),this),this.debug(this.pattern,n),n=n.filter((function(t){return-1===t.indexOf(!1)})),this.debug(this.pattern,n),this.set=n},l.prototype.parseNegate=function(){var t=this.pattern,e=!1,n=this.options,r=0;if(n.nonegate)return;for(var i=0,o=t.length;i<o&&"!"===t.charAt(i);i++)e=!e,r++;r&&(this.pattern=t.substr(r));this.negate=e},f.braceExpand=function(t,e){return p(t,e)},l.prototype.braceExpand=p,l.prototype.parse=function(t,e){if(t.length>65536)throw new TypeError("pattern is too long");var n=this.options;if(!n.noglobstar&&"**"===t)return i;if(""===t)return"";var r,o="",u=!!n.nocase,c=!1,f=[],l=[],p=!1,d=-1,g=-1,v="."===t.charAt(0)?"":n.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",m=this;function y(){if(r){switch(r){case"*":o+="[^/]*?",u=!0;break;case"?":o+="[^/]",u=!0;break;default:o+="\\"+r}m.debug("clearStateChar %j %j",r,o),r=!1}}for(var _,b=0,w=t.length;b<w&&(_=t.charAt(b));b++)if(this.debug("%s\t%s %s %j",t,b,o,_),c&&a[_])o+="\\"+_,c=!1;else switch(_){case"/":return!1;case"\\":y(),c=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,b,o,_),p){this.debug("  in class"),"!"===_&&b===g+1&&(_="^"),o+=_;continue}m.debug("call clearStateChar %j",r),y(),r=_,n.noext&&y();continue;case"(":if(p){o+="(";continue}if(!r){o+="\\(";continue}f.push({type:r,start:b-1,reStart:o.length,open:s[r].open,close:s[r].close}),o+="!"===r?"(?:(?!(?:":"(?:",this.debug("plType %j %j",r,o),r=!1;continue;case")":if(p||!f.length){o+="\\)";continue}y(),u=!0;var O=f.pop();o+=O.close,"!"===O.type&&l.push(O),O.reEnd=o.length;continue;case"|":if(p||!f.length||c){o+="\\|",c=!1;continue}y(),o+="|";continue;case"[":if(y(),p){o+="\\"+_;continue}p=!0,g=b,d=o.length,o+=_;continue;case"]":if(b===g+1||!p){o+="\\"+_,c=!1;continue}if(p){var x=t.substring(g+1,b);try{RegExp("["+x+"]")}catch(t){var E=this.parse(x,h);o=o.substr(0,d)+"\\["+E[0]+"\\]",u=u||E[1],p=!1;continue}}u=!0,p=!1,o+=_;continue;default:y(),c?c=!1:!a[_]||"^"===_&&p||(o+="\\"),o+=_}p&&(x=t.substr(g+1),E=this.parse(x,h),o=o.substr(0,d)+"\\["+E[0],u=u||E[1]);for(O=f.pop();O;O=f.pop()){var S=o.slice(O.reStart+O.open.length);this.debug("setting tail",o,O),S=S.replace(/((?:\\{2}){0,64})(\\?)\|/g,(function(t,e,n){return n||(n="\\"),e+e+n+"|"})),this.debug("tail=%j\n   %s",S,S,O,o);var N="*"===O.type?"[^/]*?":"?"===O.type?"[^/]":"\\"+O.type;u=!0,o=o.slice(0,O.reStart)+N+"\\("+S}y(),c&&(o+="\\\\");var C=!1;switch(o.charAt(0)){case".":case"[":case"(":C=!0}for(var I=l.length-1;I>-1;I--){var A=l[I],k=o.slice(0,A.reStart),M=o.slice(A.reStart,A.reEnd-8),T=o.slice(A.reEnd-8,A.reEnd),j=o.slice(A.reEnd);T+=j;var P=k.split("(").length-1,D=j;for(b=0;b<P;b++)D=D.replace(/\)[+*?]?/,"");var R="";""===(j=D)&&e!==h&&(R="$"),o=k+M+j+R+T}""!==o&&u&&(o="(?=.)"+o);C&&(o=v+o);if(e===h)return[o,u];if(!u)return function(t){return t.replace(/\\(.)/g,"$1")}(t);var W=n.nocase?"i":"";try{var $=new RegExp("^"+o+"$",W)}catch(t){return new RegExp("$.")}return $._glob=t,$._src=o,$};var h={};f.makeRe=function(t,e){return new l(t,e||{}).makeRe()},l.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,n=e.noglobstar?"[^/]*?":e.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",r=e.nocase?"i":"",o=t.map((function(t){return t.map((function(t){return t===i?n:"string"==typeof t?function(t){return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}(t):t._src})).join("\\/")})).join("|");o="^(?:"+o+")$",this.negate&&(o="^(?!"+o+").*$");try{this.regexp=new RegExp(o,r)}catch(t){this.regexp=!1}return this.regexp},f.match=function(t,e,n){var r=new l(e,n=n||{});return t=t.filter((function(t){return r.match(t)})),r.options.nonull&&!t.length&&t.push(e),t},l.prototype.match=function(t,e){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var n=this.options;"/"!==r.sep&&(t=t.split(r.sep).join("/"));t=t.split(u),this.debug(this.pattern,"split",t);var i,o,s=this.set;for(this.debug(this.pattern,"set",s),o=t.length-1;o>=0&&!(i=t[o]);o--);for(o=0;o<s.length;o++){var a=s[o],c=t;if(n.matchBase&&1===a.length&&(c=[i]),this.matchOne(c,a,e))return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},l.prototype.matchOne=function(t,e,n){var r=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,s=0,a=t.length,u=e.length;o<a&&s<u;o++,s++){this.debug("matchOne loop");var c,f=e[s],l=t[o];if(this.debug(e,f,l),!1===f)return!1;if(f===i){this.debug("GLOBSTAR",[e,f,l]);var p=o,h=s+1;if(h===u){for(this.debug("** at the end");o<a;o++)if("."===t[o]||".."===t[o]||!r.dot&&"."===t[o].charAt(0))return!1;return!0}for(;p<a;){var d=t[p];if(this.debug("\nglobstar while",t,p,e,h,d),this.matchOne(t.slice(p),e.slice(h),n))return this.debug("globstar found match!",p,a,d),!0;if("."===d||".."===d||!r.dot&&"."===d.charAt(0)){this.debug("dot detected!",t,p,e,h);break}this.debug("globstar swallow a segment, and continue"),p++}return!(!n||(this.debug("\n>>> no match, partial?",t,p,e,h),p!==a))}if("string"==typeof f?(c=r.nocase?l.toLowerCase()===f.toLowerCase():l===f,this.debug("string match",f,l,c)):(c=l.match(f),this.debug("pattern match",f,l,c)),!c)return!1}if(o===a&&s===u)return!0;if(o===a)return n;if(s===u)return o===a-1&&""===t[o];throw new Error("wtf?")}},function(t,e,n){var r=n(9),i=n(10);t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return function t(e,n){var o=[],s=i("{","}",e);if(!s||/\$$/.test(s.pre))return[e];var u,c=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),l=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),v=c||l,m=s.body.indexOf(",")>=0;if(!v&&!m)return s.post.match(/,.*\}/)?(e=s.pre+"{"+s.body+a+s.post,t(e)):[e];if(v)u=s.body.split(/\.\./);else{if(1===(u=function t(e){if(!e)return[""];var n=[],r=i("{","}",e);if(!r)return e.split(",");var o=r.pre,s=r.body,a=r.post,u=o.split(",");u[u.length-1]+="{"+s+"}";var c=t(a);a.length&&(u[u.length-1]+=c.shift(),u.push.apply(u,c));return n.push.apply(n,u),n}(s.body)).length)if(1===(u=t(u[0],!1).map(p)).length)return(b=s.post.length?t(s.post,!1):[""]).map((function(t){return s.pre+u[0]+t}))}var y,_=s.pre,b=s.post.length?t(s.post,!1):[""];if(v){var w=f(u[0]),O=f(u[1]),x=Math.max(u[0].length,u[1].length),E=3==u.length?Math.abs(f(u[2])):1,S=d;O<w&&(E*=-1,S=g);var N=u.some(h);y=[];for(var C=w;S(C,O);C+=E){var I;if(l)"\\"===(I=String.fromCharCode(C))&&(I="");else if(I=String(C),N){var A=x-I.length;if(A>0){var k=new Array(A+1).join("0");I=C<0?"-"+k+I.slice(1):k+I}}y.push(I)}}else y=r(u,(function(e){return t(e,!1)}));for(var M=0;M<y.length;M++)for(var T=0;T<b.length;T++){var j=_+y[M]+b[T];(!n||v||j)&&o.push(j)}return o}(function(t){return t.split("\\\\").join(o).split("\\{").join(s).split("\\}").join(a).split("\\,").join(u).split("\\.").join(c)}(t),!0).map(l)};var o="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",u="\0COMMA"+Math.random()+"\0",c="\0PERIOD"+Math.random()+"\0";function f(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function l(t){return t.split(o).join("\\").split(s).join("{").split(a).join("}").split(u).join(",").split(c).join(".")}function p(t){return"{"+t+"}"}function h(t){return/^-?0\d/.test(t)}function d(t,e){return t<=e}function g(t,e){return t>=e}},function(t,e){t.exports=function(t,e){for(var r=[],i=0;i<t.length;i++){var o=e(t[i],i);n(o)?r.push.apply(r,o):r.push(o)}return r};var n=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,n){"use strict";function r(t,e,n){t instanceof RegExp&&(t=i(t,n)),e instanceof RegExp&&(e=i(e,n));var r=o(t,e,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+t.length,r[1]),post:n.slice(r[1]+e.length)}}function i(t,e){var n=e.match(t);return n?n[0]:null}function o(t,e,n){var r,i,o,s,a,u=n.indexOf(t),c=n.indexOf(e,u+1),f=u;if(u>=0&&c>0){for(r=[],o=n.length;f>=0&&!a;)f==u?(r.push(f),u=n.indexOf(t,f+1)):1==r.length?a=[r.pop(),c]:((i=r.pop())<o&&(o=i,s=c),c=n.indexOf(e,f+1)),f=u<c&&u>=0?u:c;r.length&&(a=[o,s])}return a}t.exports=r,r.range=o},function(t,e,n){"use strict";n.r(e);var r=n(2),i=n(3),o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},s={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",fadeColor:"transparent",animation:"spinner-line-fade-default",rotate:0,direction:1,speed:1,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:"0 0 1px transparent",position:"absolute"},a=function(){function t(t){void 0===t&&(t={}),this.opts=o(o({},s),t)}return t.prototype.spin=function(t){return this.stop(),this.el=document.createElement("div"),this.el.className=this.opts.className,this.el.setAttribute("role","progressbar"),u(this.el,{position:this.opts.position,width:0,zIndex:this.opts.zIndex,left:this.opts.left,top:this.opts.top,transform:"scale("+this.opts.scale+")"}),t&&t.insertBefore(this.el,t.firstChild||null),function(t,e){var n=Math.round(e.corners*e.width*500)/1e3+"px",r="none";!0===e.shadow?r="0 2px 4px #000":"string"==typeof e.shadow&&(r=e.shadow);for(var i=function(t){for(var e=/^\s*([a-zA-Z]+\s+)?(-?\d+(\.\d+)?)([a-zA-Z]*)\s+(-?\d+(\.\d+)?)([a-zA-Z]*)(.*)$/,n=[],r=0,i=t.split(",");r<i.length;r++){var o=i[r].match(e);if(null!==o){var s=+o[2],a=+o[5],u=o[4],c=o[7];0!==s||u||(u=c),0!==a||c||(c=u),u===c&&n.push({prefix:o[1]||"",x:s,y:a,xUnits:u,yUnits:c,end:o[8]})}}return n}(r),o=0;o<e.lines;o++){var s=~~(360/e.lines*o+e.rotate),a=u(document.createElement("div"),{position:"absolute",top:-e.width/2+"px",width:e.length+e.width+"px",height:e.width+"px",background:c(e.fadeColor,o),borderRadius:n,transformOrigin:"left",transform:"rotate("+s+"deg) translateX("+e.radius+"px)"}),l=o*e.direction/e.lines/e.speed;l-=1/e.speed;var p=u(document.createElement("div"),{width:"100%",height:"100%",background:c(e.color,o),borderRadius:n,boxShadow:f(i,s),animation:1/e.speed+"s linear "+l+"s infinite "+e.animation});a.appendChild(p),t.appendChild(a)}}(this.el,this.opts),this},t.prototype.stop=function(){return this.el&&("undefined"!=typeof requestAnimationFrame?cancelAnimationFrame(this.animateId):clearTimeout(this.animateId),this.el.parentNode&&this.el.parentNode.removeChild(this.el),this.el=void 0),this},t}();function u(t,e){for(var n in e)t.style[n]=e[n];return t}function c(t,e){return"string"==typeof t?t:t[e%t.length]}function f(t,e){for(var n=[],r=0,i=t;r<i.length;r++){var o=i[r],s=l(o.x,o.y,e);n.push(o.prefix+s[0]+o.xUnits+" "+s[1]+o.yUnits+o.end)}return n.join(", ")}function l(t,e,n){var r=n*Math.PI/180,i=Math.sin(r),o=Math.cos(r);return[Math.round(1e3*(t*o+e*i))/1e3,Math.round(1e3*(-t*i+e*o))/1e3]}var p=function(){function t(t){void 0===t&&(t=""),this.cookieName="skyOpenTemplate",this.cookieValue=t;var e=new Date;e.setFullYear(e.getFullYear()+2),this.expiryDate=e.toUTCString()}return t.prototype.set=function(t){t&&(this.cookieValue=t),this.cookieValue?document.cookie=this.cookieName+"="+this.cookieValue+";expires="+this.expiryDate+";":alert("Valid directory not chosen.")},t.prototype.get=function(){if(document.cookie){var t=document.cookie.split(";");if(t.length)for(var e=0,n=t;e<n.length;e++){var r=n[e],i=r.split("=")[0].trim(),o=r.split("=")[1].trim();if(i===this.cookieName)return o}}return null},t}(),h=function(){function t(t){this.fullPath="",this.fileName="",this.fullPath=t;var e=t.replace(/\\/g,"/").split("/").pop();this.fileName=void 0===e?"File name malformed":e}return t.prototype.toString=function(){return"fileName: "+this.fileName+"\n      fullPath: "+this.fullPath},t}(),d=function(){function t(t,e){this.select=t,this.input=e,this.optionsOriginal=null}return t.prototype.setOptionsOriginal=function(){this.optionsOriginal=this.select.children("option")},t.prototype.filterOptionsIn=function(t){this.select=t;var e=this.select.children("option"),n=this.findMatches(this.input.val());null!==n?(e.remove(),this.select.append(n)):this.select.append(this.optionsOriginal)},t.prototype.findMatches=function(t){var e=new RegExp(t,"gi");return null!==this.optionsOriginal&&t?this.optionsOriginal.filter((function(t,n){return null!==n.text.match(e)})):null},t}();!function(){var t=new r.CSInterface,e=new p,n=new a({color:"#fff",lines:12}),o=$("body"),s=$("#template-list-wrapper"),u=$("#template-list"),c=$("#search-box"),f=new d(u,c);$.blockUI.defaults={message:null,onBlock:function(){return n.spin(o.get(0))},onUnblock:function(){return n.stop()},overlayCSS:{backgroundColor:"#fff",opacity:.3},showOverlay:!0};var l=function(e){for(var n=0,r=e;n<r.length;n++){var i=r[n],o=new h(i),s=JSON.stringify(o);t.evalScript("openDocument("+s+")",(function(){}))}$.unblockUI()};!function(){u&&u.dblclick((function(){var t=a.val();t.length&&($.blockUI(),setTimeout((function(){return l(t)}),1e3))}));var t=$("#open-button");t&&t.on("click",(function(){var t=a.val();t.length&&($.blockUI(),setTimeout((function(){return l(t)}),1e3))}));var r=function(t){s.block({onBlock:function(){return n.spin(s.get(0))}}),setTimeout((function(){i.files(t,(function(t,e){if(t)throw t;var n=e.filter((function(t){return"ai"===t.split(".").pop()}));n.sort();for(var r=[],i=0,o=n;i<o.length;i++){var l=o[i];r.push(new h(l))}!function(t){if(t.length){a.empty();for(var e=0,n=t;e<n.length;e++){var r=n[e];a.append($("<option />").val(r.fullPath).text(r.fileName))}}}(r),s.unblock(),c.off(),f.setOptionsOriginal(),c.on("keyup change reset search",(function(){f.filterOptionsIn(u)}))}))}),1e3)},o=$("#file-control"),a=$("#template-list");o&&o.on("change",(function(){var t=o[0].files;if(t.length){var n=t[0].path.replace(/\\/g,"/"),i=n.substr(0,n.lastIndexOf("/"));e.set(i),r(i)}})),themeManager.init();var p=e.get();p&&r(p);var d=function(){var t=Math.floor((window.innerHeight-180)/20);u.attr("size",t)};$(d),$(window).on("resize",d)}()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,